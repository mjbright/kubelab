
[ "$1" = "-x" ] && set -x

# RECORD NEW FUNCTIONS: -----------------------------------------------

FN_0_LIST_ORIG=/tmp/functions.0.list
FN_0_LIST=/tmp/functions.0.list
FN_1_LIST=/tmp/functions.1.list

if [ -f /tmp/functions.0.list ]; then
    FN_0_LIST=/tmp/functions.0.rep.list
    FN_1_LIST=/tmp/functions.1.rep.list
fi
typeset -f > $FN_0_LIST

# SETUP     FUNCTIONS: ------------------------------------------------
# Source .jupyer.profile, then demonstrate kubectl working:

EXCL_FN_SETUP() {
    [ ! -z "$_SETUP_RUN" ] && return 0
    export _SETUP_RUN=$(date)

    # Jupyter on Ubuntu, or in kubelab:
    [ $(id -un) = "root" ] && export HOME=/root
    ## [ -f /root/.profile ]         && . /root/.profile
    ## [ -f /root/.jupyter.profile ] && . /root/.jupyter.profile
    export PATH=~/bin:$PATH
    ls -altr ~/
    kubectl get pods

    echo "$(kubectl get nodes master -o custom-columns=IP:.status.addresses[0].address --no-headers) master" >> /etc/hosts
    echo "$(kubectl get nodes worker1 -o custom-columns=IP:.status.addresses[0].address --no-headers) worker1" >> /etc/hosts

    echo
    echo "/etc/hosts inside kubelab Pod:"
    cat /etc/hosts

    typeset -f > $FN_1_LIST
    ALL_ADD_FNS=$(diff $FN_0_LIST_ORIG $FN_1_LIST | grep "^> .* ()" | sed -e 's/^>  *//' -e 's/ ()//' | grep -v functions: | tr '\n' ' ')
    [ ! -z "$ALL_ADD_FNS" ] && echo "All added functions: $ALL_ADD_FNS"
    [ "$FN_0_LIST_ORIG" != "$FN_0_LIST" ] && {
        NEW_ADD_FNS=$(diff $FN_0_LIST $FN_1_LIST | grep "^> .* ()" | sed -e 's/^>  *//' -e 's/ ()//' | grep -v functions: | tr '\n' ' ')
        [ ! -z "$NEW_ADD_FNS" ] && echo "New functions: $NEW_ADD_FNS"
    }
}

# NOTEBOOK  FUNCTIONS: ------------------------------------------------
#
# Perform nbtool.py processing
# - filters out '#EXCLUDE' cells
# - filters out SET_VARS cells, but picks up VAR values
# - replaces VAR values in cells
# - TODO: Create ToC (Table of Contents) and links to Next section
# - TODO: Autonumber sections/subsections
#
EXCL_FN_FILTER_NOTEBOOK() {
    NOTEBOOK="$1"
    [ -z "$NOTEBOOK" ] && NOTEBOOK=$(ls -1tr *.ipynb | grep -v filtered | tail -1)
    
    # In kubelab:
    #CMD="/opt/conda/bin/python3 ./nbtool.py -f $NOTEBOOK"

    # Jupyter on Ubuntu, or in kubelab:
    PYTHON3=$(which python3 || echo /opt/conda/bin/python3)
    CMD="$PYTHON3 ./nbtool.py -f $NOTEBOOK"
    echo "---- $CMD"
    $CMD
    OP_NOTEBOOK=$(ls -1tr *.ipynb | grep filtered | tail -1)
    ls -altr $OP_NOTEBOOK
    grep EXCLUDE $OP_NOTEBOOK
    return 0
}

# EXCL_FN_* FUNCTIONS: ------------------------------------------------

EXCL_FN_HIDE()          { grep -v $* ;                        return 0; }

EXCL_FN_HIGHLIGHT()     { grep --color=always -E "|.*${*}.*"; return 0; }
EXCL_FN_HIGHLIGHT_EOL() { grep --color=always -E "|${*}.*";   return 0; }
EXCL_FN_HIGHLIGHT_SOL() { grep --color=always -E "|.*${*}";   return 0; }
EXCL_FN_HIGHLIGHT_MATCH() { grep --color=always -E "${*}";    return 0; }

#echo HELLO WORLD from Jupyter | EXCL_FN_HIGHLIGHT WORLD
#echo HELLO WORLD from Jupyter | EXCL_FN_HIGHLIGHT_EOL WORLD
#echo HELLO WORLD from Jupyter | EXCL_FN_HIGHLIGHT_SOL WORLD

# VARIABLE  FUNCTIONS: ------------------------------------------------

# Usage:
# SET_VAR_LAST_FILE args
SET_VAR_LAST_FILE() {
    __LAST_FILE=$(ls -1tr . | tail -1)
    echo VAR __LAST_FILE=$__LAST_FILE
    return 0
}

# Usage: SET_VAR_POD_IPS -n <ns> podname
# curl -sL http://$__POD_IPS
SET_VAR_POD_IPS() {
    #set -x
    NS="default"
    [ $# -eq 2 ] && { NS="$1"; shift; }
    POD_NAME="$1"
    
    #POD_IP=$(kubectl get pods "$POD_NAME" -o custom-columns=NAME:.status.podIP --no-headers)
    __POD_IPS=$(kubectl -n "$NS" get pods -o wide | awk "/^$POD_NAME/ { print \$6; }")
    echo VAR __POD_IPS=$__POD_IPS
    return 0
}

SET_VAR_SVC_IP() {
    __NS="default"
    [ $# -eq 2 ] && { __NS="$1"; shift; }
    __SVC_NAME="$1"
    
    __SVC_IP=$(kubectl get service -n $__NS "$__SVC_NAME" -o custom-columns=IP:.spec.clusterIP --no-headers)
    echo VAR __SVC_IP=$__SVC_IP
    return 0
}

SET_VAR_SVC_PORT() {
    __NS="default"
    [ $# -eq 2 ] && { __NS="$1"; shift; }
    __SVC_NAME="$1"
    
    __SVC_PORT=$(kubectl get service -n $__NS "$__SVC_NAME" -o custom-columns=NP:.spec.ports[0].nodePort --no-headers)
    echo VAR __SVC_PORT=$__SVC_PORT
    return 0
}

SET_VAR_NODE_IP() {
    __NODE_NAME="$1"
    
    __NODE_IP=$(kubectl get node "$__NODE_NAME" -o custom-columns=IP:.status.addresses[0].address --no-headers)
    echo VAR __NODE_IP=$__NODE_IP
    return 0
}

SET_VAR_IDX() {
    VAR_NAME=$1; shift
    IDX=$1;      shift

    NEW_VAR_NAME=${VAR_NAME%S}
    #NEW_VAR_NAME=${NEW_VAR_NAME%S}
    
    eval VALUE="\$$VAR_NAME"
    echo VALUE=$VALUE
    while [ $IDX -gt 1 ]; do
        echo "[$IDX] VALUE=$VALUE"
        VALUE=${VALUE#* }
        let IDX=IDX-1
    done
    VALUE=${VALUE%% *}
    echo eval $NEW_VAR_NAME=$VALUE
    eval $NEW_VAR_NAME="$VALUE"
    return 0
}

FOREACH() {
    __VAR_NAME=$1; shift
    #echo "\$*=$*"
           
    __VAR_NAME_s="${__VAR_NAME}S"
    #echo "__VAR_NAME_s=$__VAR_NAME_s"
    #echo "__POD_IPS=$__POD_IPS"
    eval __VALUES="\$$__VAR_NAME_s"
    #echo "__VALUES=$__VALUES"
    
    for __VALUE in $__VALUES; do
        eval $__VAR_NAME=$__VALUE
        #echo
        #echo "__POD_IP=$__POD_IP"
        #echo "\$*=$*"
        eval $*
    done
    return 0
}

TEST_VAR_FUNCTIONS() {
    #SET_VAR_POD_IPS k8s-demo
    SET_VAR_POD_IPS kube-system coredns
    echo $__POD_IPS

    SET_VAR_SVC_IP kubernetes
    echo $__SVC_IP

    SET_VAR_SVC_PORT k8s-demo-np
    echo $__SVC_PORT

    #__POD_IPS="1.a.b.c.d 2.A.B.C.E 3.a.B.c.F 4.4 5.5 6.6 7.7 8.8"
    #SET_VAR_IDX __POD_IPS 3
    #echo $__POD_IP

    SET_VAR_NODE_IP master
    echo $__NODE_IP

    FOREACH __POD_IP echo "POD_IP=\$__POD_IP"
}

# WAIT ON EXEC FUNCTIONS: ---------------------------------------------

EXCL_FN_WAIT() { sleep $1; cat; return 0; }

# Sleep and cell will be excluded
WAIT() {
    sleep $1;
    return 0
}

WAIT_CMD() {
    #set -x
    echo $* >/tmp/WAIT_CMD
    
    while ! eval "$*" >>/tmp/WAIT_CMD 2>&1; do
        #echo looping ...
        sleep 1
    done
    return 0
}

### --- TODO ----------------------
### Use kubectl wait
# - In scripts use kubectl wait: kubectl wait --for=condition=available --timeout=60s --all deployments
# 
# See - https://mrkaran.dev/posts/kubectl-wait/

# Waits for at least 1 Pod to be in state (default: Running)
# Note: would be useful a function which waits for *all* matching Pods to be running
WAIT_PODS() {
    NAMESPACE="default"
    [ "$1" = "-n" ] && { shift; NAMESPACE="$1"; shift; }

    POD_MATCH=$1; shift
    STATE=""
        
    [ ! -z "$1" ] && STATE=$1
    if [ -z "$STATE" ];then
        WAIT_PODS -n $NAMESPACE $POD_MATCH "(ContainerCreating|Running)"
        WAIT_PODS -n $NAMESPACE $POD_MATCH "Running"
        return 0
    fi

    DEBUG_WAIT=1
    WAIT_SLEEP=1
    
    [ $DEBUG_WAIT -ne 0 ] && echo "Waiting for '$POD_MATCH' Pods to start ..."
    while ! kubectl -n $NAMESPACE get pods | grep -q $POD_MATCH; do
        sleep $WAIT_SLEEP
    done
    [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NAMESPACE get pods | grep $POD_MATCH

    [ $DEBUG_WAIT -ne 0 ] && echo "Waiting for at least 1 '$POD_MATCH' Pods to to be in <$STATE> state  ..."
    while ! kubectl -n $NAMESPACE get pods | grep $POD_MATCH | grep -qE " $STATE "; do
        sleep $WAIT_SLEEP
    done
    [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NAMESPACE get pods | grep $POD_MATCH
    
    #### # NEEDS TESTING:
    #### # All in same state:
    #### [ $DEBUG_WAIT -ne 0 ] && echo "Waiting for all '$POD_MATCH' Pods to to be in <$STATE> state  ..."
    #### while kubectl get pods | grep $POD_MATCH | grep -vq " $STATE "; do
    ####     sleep $WAIT_SLEEP
    #### done
    #### [ $DEBUG_WAIT -ne 0 ] && kubectl get pods | grep $POD_MATCH
    return 0
}

WAIT_NO_PODS() {
    NAMESPACE="default"
    [ "$1" = "-n" ] && { shift; NAMESPACE="$1"; shift; }

    POD_MATCH=$1; shift
    STATE=""
    
    [ "$1" = "-n" ] && { shift; NAMESPACE="$1"; shift; }
    [ $DEBUG_WAIT -ne 0 ] && echo "Waiting for '$POD_MATCH' Pods to terminate ..."
    while kubectl -n $NAMESPACE get pods | grep -q $POD_MATCH; do
        sleep $WAIT_SLEEP
    done
    [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NAMESPACE get pods | grep $POD_MATCH
    return 0
}

#set +x
#WAIT 1
#WAIT_CMD [ -f /tmp/OK ]
#WAIT_PODS quiz
#WAIT_PODS quiz
#WAIT_PODS quiz "ContainerCreating|Running"

# EXCLUDE CELL FUNCTIONS: ---------------------------------------------

# EXCL_FN_CLEANUP      FUNCTIONS: ---------------------------------------------

EXCL_FN_CLEANUP() {
    kubectl get ns

    kubectl delete ns frontend
    kubectl -n default delete service --all
    kubectl -n default delete deploy --all
    kubectl -n default delete pods --all

    kubectl -n kube-system delete deploy/traefik-ingress-controller
    kubectl -n kube-system delete svc traefik-ingress-service
    kubectl -n kube-system delete sa/traefik-ingress-controller
    kubectl delete clusterrolebinding/traefik-ingress-controller
    kubectl delete clusterrole/traefik-ingress-controller
    #kubectl -n kube-system delete sa/traefik-ingress-controller

    kubectl taint node master node-role.kubernetes.io/master:NoSchedule

    kubectl get pods -A
}

EXEC_FN_CLEANUP_TRAEFIK() {
    kubectl delete -f https://raw.githubusercontent.com/containous/traefik/v1.7/examples/k8s/traefik-deployment.yaml
    kubectl delete -f https://raw.githubusercontent.com/containous/traefik/v1.7/examples/k8s/traefik-rbac.yaml
}

EXEC_FN_NODES_CHECK() {
    kubectl get node
    kubectl describe node | grep Pressure | grep True
}

# OTHER MISC   FUNCTIONS: ---------------------------------------------

RETURN() {
    [ -z "$1" ] && return 0
    return $1
}

# SETUP SECTION -------------------------------------------------------

EXCL_FN_SETUP

# OTHER NOTES   -------------------------------------------------------

# See kubectl wait remarks above
# kubectl api-resources


