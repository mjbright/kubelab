FROM leandatascience/jupyterlab-ds:latest

USER root

# Upgrade Apt repos / Get tmux
RUN apt-get update && apt-get upgrade -y
RUN apt-get install -y tmux curl vim

# For PDF rendering (but +800MBy??)
# RUN apt-get install -y texlive-xetex texlive-fonts-recommended texlive-generic-recommended

WORKDIR /root/

RUN mkdir -p /root/bin

# Tool Versions
ARG KUBECTL_V
ARG HELM_V
ARG KUBECTX_V
ARG KUBEBOX_V
ARG DOCKER_CE_V
ARG DOCKER_MACHINE_V
ARG DOCKER_COMPOSE_V

# Upgrade Pip / Get Kubernetes Python Client
RUN pip install --upgrade pip && \
    pip install setuptools && \
    pip install pick ppretty && \
    pip install RISE && \
    pip install kubernetes

# ---- Install bash_kernel:
# Make sure not to create a cache dir else NB_UID switching
# will hit issues.
RUN pip install --no-cache-dir bash_kernel
RUN python -m bash_kernel.install

# Get Helm
ENV HELM_V=$HELM_V

RUN mkdir -p /root/tmp/helm && \
    cd /root/tmp/helm && \
    curl -L -o helm.tar.gz https://get.helm.sh/helm-${HELM_V}-linux-amd64.tar.gz && \
    tar zxvf helm.tar.gz && \
    rm -f /root/bin/helm 2>/dev/null && \
    cp -a /root/tmp/helm/linux-amd64/helm /root/bin/helm_${HELM_V} && \
    chmod +x /root/bin/helm_${HELM_V} && \
    cd && rm -rf /root/tmp/helm && \
    ln -s helm_${HELM_V} /root/bin/helm

# Get kubectx/ns
ENV KUBECTX_V=$KUBECTX_V

RUN mkdir -p /root/tmp/kubectx && \
    curl -L -o /root/tmp/kubectx.tgz https://github.com/ahmetb/kubectx/archive/v${KUBECTX_V}.tar.gz && \
    cd /root/tmp/  && \
    tar xvf kubectx.tgz && \
    cp -a kubectx-${KUBECTX_V}/kubectx /root/bin/kubectx_${KUBECTX_V} && \
    cp -a kubectx-${KUBECTX_V}/kubens  /root/bin/kubens_${KUBECTX_V}  && \
    cd && rm -rf /root/tmp/kubectx /root/tmp/kubens 2>/dev/null && \
    chmod +x /root/bin/kubectx_${KUBECTX_V} /root/bin/kubens_${KUBECTX_V} && \
    ln -s kubectx_${KUBECTX_V} /root/bin/kubectx && \
    ln -s kubens_${KUBECTX_V}  /root/bin/kubens

# Get kubebox
ENV KUBEBOX_V=$KUBEBOX_V

RUN curl -L -o /root/bin/kubebox_$KUBEBOX_V https://github.com/astefanutti/kubebox/releases/download/$KUBEBOX_V/kubebox-linux && \
    chmod +x /root/bin/kubebox_$KUBEBOX_V && \
    rm -f /root/bin/kubebox 2>/dev/null && \
    ln -s kubebox_$KUBEBOX_V /root/bin/kubebox

# Install Docker tools:
ENV DOCKER_CE_V=$DOCKER_CE_V
ENV DOCKER_MACHINE_V=$DOCKER_MACHINE_V
ENV DOCKER_COMPOSE_V=$DOCKER_COMPOSE_V

RUN mkdir -p /root/tmp/docker && \
    cd /root/tmp/docker && \
    curl -L -o docker-${DOCKER_CE_V}.tgz https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_CE_V}.tgz && \
    tar zxf docker-${DOCKER_CE_V}.tgz && \
    cp -a docker/docker /root/bin/docker_${DOCKER_CE_V} && \
    rm -rf /root/tmp/docker 2>/dev/null && \
    chmod +x /root/bin/docker_${DOCKER_CE_V} && \
    ln -s docker_${DOCKER_CE_V} /root/bin/docker

RUN curl -L -o /root/bin/docker-machine_${DOCKER_MACHINE_V} \
               https://github.com//docker/machine/releases/download/v${DOCKER_MACHINE_V}/docker-machine-Linux-x86_64 && \
    chmod +x   /root/bin/docker-machine_${DOCKER_MACHINE_V} && \
    rm -f /root/bin/docker-machine 2>/dev/null && \
    ln -s docker-machine_${DOCKER_MACHINE_V} /root/bin/docker-machine

RUN curl -L -o /root/bin/docker-compose_${DOCKER_COMPOSE_V} \
               https://github.com//docker/compose/releases/download/${DOCKER_COMPOSE_V}/docker-compose-Linux-x86_64 && \
    chmod +x   /root/bin/docker-compose_${DOCKER_COMPOSE_V} && \
    rm -rf     /root/bin/docker-compose 2>/dev/null && \
    cd && rm -rf /root/tmp/docker && \
    ln -s docker-compose_${DOCKER_COMPOSE_V} /root/bin/docker-compose
    #pip install docker-compose && \

# Get kubectl - INSTAL LAST AS THIS WILL CHANGE MOST OFTEN
ENV KUBECTL_V=$KUBECTL_V

RUN curl -L -o /root/bin/kubectl_${KUBECTL_V} https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_V/bin/linux/amd64/kubectl && \
    rm -f /root/bin/kubectl 2>/dev/null && \
    ln -s kubectl_${KUBECTL_V} /root/bin/kubectl && \
    chmod +x /root/bin/kubectl_${KUBECTL_V}

#ADD .bashrc /root/
#ADD tput /root/bin/tput
#RUN chmod +x /root/bin/tput
#ENTRYPOINT ["/sbin/tini", "--"]

RUN echo 'export PATH=/root/bin:$PATH' >> .profile

EXPOSE 8888

#ENV MAIN_PATH=/usr/local/bin/jupyterkubelab
ENV MAIN_PATH=/usr/local/jupyterkubelab
ENV LIBS_PATH=${MAIN_PATH}/libs
ENV CONFIG_PATH=${MAIN_PATH}/config
ENV NOTEBOOK_PATH=${MAIN_PATH}/notebooks

RUN mkdir -p ${MAIN_PATH}/bin
ADD JupyterKubeLab/jupyterkubelab.configurator/libs ${MAIN_PATH}/libs
ADD JupyterKubeLab/jupyterkubelab.configurator/config ${MAIN_PATH}/config
#ADD JupyterKubeLab/jupyterkubelab.configurator/notebooks ${MAIN_PATH}/notebooks

#RUN set -x && ls -al /usr/local/jupyterkubelab /usr/local/jupyterkubelab/config/run_jupyter.sh && set +x
RUN ls -al /usr/local/jupyterkubelab /usr/local/jupyterkubelab/config/run_jupyter.sh

RUN mkdir -p /home/jovyan/.jupyter/custom
ADD custom.css /home/jovyan/.jupyter/custom

#CMD ["jupyter", "notebook", "--port", "8888", "--ip=0.0.0.0", "--allow-root", "--no-browser"]
#CMD cd ${MAIN_PATH} && sh config/run_jupyter.sh
#
CMD cd ${MAIN_PATH} && sh config/run_jupyter.sh

